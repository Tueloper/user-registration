const randomBytes = require('crypto').randomBytes;
const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient();

/**
 * lambda handler for creating user account in AWS
 * @param   {Object} event this is the event triggered and carries req properties
 * @param   {Object} context this is aws
 * @param   {Function} callback   callback function to provide a return value from your Node.js Lambda function
 * @return  {Object}    User object details
 */
exports.handler = (event, context, callback) => {

    const userId = toUrlString(randomBytes(16));
    const body = JSON.parse(event.body);

    saveUser(userId, body).then(() => {
        callback(null, {
            statusCode: 201,
            body: JSON.stringify({ body }),
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
        });
    }).catch((err) => {
        errorResponse(err.message, context.awsRequestId, callback)
    });
};

/**
 * function used to save user to dynamodb
 * @param   {String} userId user generayed id
 * @param   {Object} user user object to be saved in the db
 * @return  {Object}  save object
 */
function saveUser(userId, user) {
    return ddb.put({
        TableName: 'users',
        Item: {
            ...user,
            id: userId,
            createdAt: new Date().toISOString(),
        },
    }).promise();
}

/**
 * function used convert buffer to URL String
 * @param   {BinaryData} buffer generated by randombytes
 * @return  {String}  convert string
 */
function toUrlString(buffer) {
    return buffer.toString('base64')
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=/g, '');
}

/**
 * function to send error messages
 * @param   {String} errorMessage error message
 * @param   {String} awsRequestId aws reference id for request
 * @param   {Function} callback function callback
 * @return  {Object}  save object
 */
function errorResponse(errorMessage, awsRequestId, callback) {
  callback(null, {
    statusCode: 500,
    body: JSON.stringify({
      Error: errorMessage,
      Reference: awsRequestId,
    }),
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
  });
}


// Note: This code was deployed in AWS lambda functions. It was just added here for documentation purpose.
// Its already been deployed in AWS.